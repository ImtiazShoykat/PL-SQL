CREATE OR REPLACE FUNCTION HR.reverse_word (P_input_WORD IN VARCHAR2)
    RETURN VARCHAR2
IS
    output_word   VARCHAR2 (100) := '';
BEGIN
    FOR i IN REVERSE 1 .. LENGTH (P_input_WORD)
    LOOP
        output_word :=  output_word || SUBSTR (P_input_WORD, i, 1);
    END LOOP;

    RETURN output_word;
END;
/
==============================================

DECLARE
    v_word      VARCHAR2 (100) := 'AKA';
    v_reverse   VARCHAR2 (100);
BEGIN
    SELECT reverse_word (v_word) INTO v_reverse FROM DUAL;

    IF v_word = v_reverse
    THEN
        DBMS_OUTPUT.put_line (
            v_word || ' is the same as background and forward');
    ELSE
        DBMS_OUTPUT.put_line (
            v_word || ' is not same as background and forward');
    END IF;
END;


====================================================


/* Formatted on 10/24/2023 11:34:02 AM (QP5 v5.388) */
CREATE OR REPLACE FUNCTION backward_forward_check (p_word IN VARCHAR2)
    RETURN varchar2
IS
    v_reverse   VARCHAR2 (100);
BEGIN
    SELECT reverse_word (p_word) INTO v_reverse FROM DUAL;

    IF v_reverse = p_word
    THEN
        RETURN p_word || ' is the same as backward and forward';
    ELSE
        RETURN p_word || ' is not the same as backward and forward';
    END IF;
END;
/



select backward_forward_check('MADAM') from dual;  --check and test the query 




CREATE OR REPLACE FUNCTION backward_forward_check(p_word IN VARCHAR2)
    RETURN VARCHAR2
IS
    v_reverse VARCHAR2(100) := '';
BEGIN
    FOR i IN REVERSE 1 .. LENGTH(p_word)
    LOOP
        v_reverse := v_reverse || SUBSTR(p_word, i, 1);
    END LOOP;

    IF v_reverse = p_word THEN
        RETURN p_word || ' is the same as backward and forward';
    ELSE
        RETURN p_word || ' is not the same as backward and forward';
    END IF;
END;
/
